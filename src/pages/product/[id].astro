---
import Layout from '../../layouts/Layout.astro';
import { getStripeProductById, getStripeProducts } from '../../lib/stripe';

export async function getStaticPaths() {
  try {
    // Fetch all products from Stripe to generate static paths
    const products = await getStripeProducts();
    
    // Return paths for all products
    return products.map((product) => ({
      params: { id: product.id },
      props: { product }
    }));
  } catch (error) {
    console.error('Error generating static paths for products:', error);
    // Return empty array if there's an error, but the page will still work with dynamic routing
    return [];
  }
}

const { id } = Astro.params;
const { product: productFromProps } = Astro.props;

if (!id) {
  throw new Error('Product ID is required');
}

// Use product from props if available (from static generation), otherwise fetch it
const product = productFromProps || await getStripeProductById(id);

if (!product) {
  throw new Error('Product not found');
}
---

<Layout>
  <div class="product-page">
    <div class="product-container">
      <!-- Product Image Section -->
      <div class="product-image-section">
        <div class="main-image">
          <img src={product.image} alt={product.name} />
        </div>
        <!-- Additional product images could go here -->
        <div class="image-thumbnails">
          <div class="thumbnail active">
            <img src={product.image} alt={product.name} />
          </div>
          <!-- Add more thumbnails as needed -->
        </div>
      </div>

      <!-- Product Details Section -->
      <div class="product-details">
        <div class="product-header">
          <h1 class="product-title">{product.name}</h1>
          <div class="product-price">${product.price.toFixed(2)}</div>
        </div>

        <div class="product-description">
          <p>{product.description}</p>
        </div>

        <div class="product-categories">
          <span class="category-label">Categories:</span>
          {product.categories.map(category => (
            <span class="category-tag">{category}</span>
          ))}
        </div>

        <!-- Add to Cart Button -->
        <button class="add-to-cart-btn" id="add-to-cart" data-price-id={product.stripePriceId}>
          Add to Cart
        </button>
        
        <!-- Back Button -->
        <!-- <button class="back-button" onclick="window.history.back()">
          ‚Üê Back to Products
        </button> -->
      </div>
    </div>
  </div>
</Layout>

<style>
  .product-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    font-family: "Cormorant", serif;
  }

  .product-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    margin-bottom: 4rem;
  }

  .product-image-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .main-image {
    width: 100%;
    height: 500px;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .main-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .image-thumbnails {
    display: flex;
    gap: 0.5rem;
  }

  .thumbnail {
    width: 80px;
    height: 80px;
    border-radius: 4px;
    overflow: hidden;
    cursor: pointer;
    border: 2px solid transparent;
    transition: border-color 0.3s ease;
  }

  .thumbnail.active {
    border-color: #a06b7a;
  }

  .thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product-details {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .product-header {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    margin-bottom: 1rem;
  }

  .product-title {
    font-family: "Special Elite", sans-serif;
    font-size: 18px;
    font-weight: 700;
    color: hsl(0, 0%, 31%);
    margin: 0 0 0.5rem;
    line-height: 1.2;
  }

  .product-price {
    font-family: "Helvetica Neue", sans-serif;
    font-size: 16px;
    font-weight: 400;
    color: #a06b7a;
  }

  .product-description {
    font-family: "Helvetica Neue", sans-serif;
    font-size: 16px;
    line-height: 1.6;
    color: #666;
  }

  .product-categories {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
    font-family: "Helvetica Neue", sans-serif;
  }

  .category-label {
    font-weight: 600;
    color: #4E4E4E;
  }

  .category-tag {
    background-color: #f5f5f5;
    color: #666;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.9rem;
    text-transform: capitalize;
  }

  .add-to-cart-btn {
    width: 100%;
    padding: 1rem 2rem;
    background-color: #a06b7a;
    color: white;
    border: none;
    border-radius: 8px;
    font-family: "Helvetica Neue", sans-serif;
    font-size: 16px;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
    margin-bottom: 1rem;
  }

  .add-to-cart-btn:hover {
    background-color: #8a5a68;
  }

  .add-to-cart-btn:active {
    transform: translateY(0);
  }

  .add-to-cart-btn:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }

  .back-button {
    width: 100%;
    padding: 0.75rem 1.5rem;
    background: transparent;
    border: 2px solid #a06b7a;
    color: #a06b7a;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
    font-family: "Helvetica Neue", sans-serif;
  }

  .back-button:hover {
    background: #a06b7a;
    color: white;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .product-page {
      padding: 1rem;
    }

    .product-container {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .product-title {
      font-size: 2rem;
    }

    .product-price {
      font-size: 1.5rem;
    }

    .main-image {
      height: 300px;
    }
  }
</style>

<script>
  // Declare Stripe as a global variable
  declare const Stripe: any;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Stripe with environment variable
    const stripePublishableKey = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY;
    
    if (!stripePublishableKey) {
      console.error('PUBLIC_STRIPE_PUBLISHABLE_KEY environment variable is not set');
      console.error('Make sure you have PUBLIC_STRIPE_PUBLISHABLE_KEY in your .env file');
      alert('Stripe configuration error. Please check your environment variables.');
      return;
    }
    
    const stripe = Stripe(stripePublishableKey);
    
    const addToCartBtn = document.getElementById('add-to-cart');

    // Add to cart functionality using client-side Stripe checkout
    addToCartBtn?.addEventListener('click', async function(this: HTMLButtonElement) {
      const priceId = this.getAttribute('data-price-id');
      
      console.log('Add to cart clicked, priceId:', priceId);
      
      if (!priceId || priceId === 'price_example') {
        alert('Product not available for purchase. Please check your Stripe configuration.');
        console.error('Invalid priceId:', priceId);
        return;
      }

      // Show loading state
      const originalText = this.textContent;
      this.textContent = 'Adding to Cart...';
      this.disabled = true;

      try {
        const successUrl = `${window.location.origin}/success`;
        const cancelUrl = `${window.location.origin}/product`;

        console.log('Creating checkout session with:', {
          priceId,
          successUrl,
          cancelUrl
        });

        // Use Stripe's client-side checkout
        const { error } = await stripe.redirectToCheckout({
          lineItems: [{
            price: priceId,
            quantity: 1,
          }],
          mode: 'payment',
          successUrl: successUrl,
          cancelUrl: cancelUrl,
        });

        if (error) {
          console.error('Stripe checkout error:', error);
          throw new Error(error.message || 'Failed to create checkout session');
        }

        console.log('Checkout session created, redirecting...');
        
      } catch (error) {
        console.error('Error adding to cart:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        alert(`Failed to add to cart: ${errorMessage}. Please check the console for more details.`);
        
        // Reset button state
        this.textContent = originalText;
        this.disabled = false;
      }
    });
  });
</script>
